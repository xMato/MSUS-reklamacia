<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<!-- ROLES -->
	<role>
		<id>zakaznik</id>
		<name>Zákazník</name>
	</role>
	<role>
		<id>system</id>
		<name>Systém</name>
	</role>
	<role>
		<id>admin</id>
		<name>Administrátor</name>
	</role>
	<role>
		<id>predajca</id>
		<name>Predajca</name>
	</role>
	<role>
		<id>schvalovatel</id>
		<name>Schvalovateľ</name>
	</role>
	<!--DATA-->
	<data type="text">
		<id>address</id>
		<title>Adresa</title>
	</data>
	<data type="text">
		<id>name</id>
		<title>Názov</title>
	</data>
	<data type="enumeration">
		<id>tovar</id>
		<title>Tovar</title>
	</data>
	<data type="enumeration">
		<id>tovar_ids</id>
		<title></title>
	</data>
	<data type="text">
		<id>selected_tovar</id>
		<title>Objednaný tovar</title>
	</data>
	<data type="enumeration">
		<id>zakaznik</id>
		<title>Zákazník</title>
	</data>
  <data type="enumeration">
    <id>zakaznik_ids</id>
    <title></title>
  </data>
  <data type="text">
    <id>selected_zakaznik</id>
    <title>Objednávateľ</title>
  </data>
	<data type="enumeration">
		<id>obchod</id>
		<title>Obchod</title>
	</data>
  <data type="enumeration">
    <id>obchod_ids</id>
    <title></title>
  </data>
  <data type="text">
    <id>selected_obchod</id>
    <title>Oberné miesto</title>
  </data>
	<data type="text">
		<id>rekId</id>
		<title>rekId</title>
	</data>
	<data type="enumeration">
		<id>category</id>
		<title>Kategória</title>
		<values>Elektro</values>
		<values>Autá</values>
		<values>Hračky</values>
		<values>Oblečenie</values>
		<values>Drogéria</values>
		<values>Hobby a záhrada</values>
	</data>
	<data type="text">
		<id>surname</id>
		<title>Priezvisko</title>
	</data>
	<data type="text">
		<id>mail</id>
		<title>E-mail</title>
	</data>
	<data type="number">
		<id>price</id>
		<title>Cena</title>
	</data>
	<data type="text">
		<id>city</id>
		<title>Mesto</title>
	</data>
	<data type="number">
		<id>kontakt</id>
		<title>Telefónny kontakt</title>
	</data>	
	<!-- TRANSITIONS -->
	<transition>
		<id>1</id>
		<x>146</x>
		<y>253</y>
		<label>vytvorenie objednávky</label>
		<dataGroup>
			<id>1</id>
			<dataRef>
				<id>tovar</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
					tovar: f.tovar,
					tovar_ids: f.tovar_ids;
					def caseList = findCases( { it.processIdentifier.eq("Team12--TVR")  } ); 
					change tovar choices {
						return caseList.collect {it.title}; 
					} 
					change tovar_ids choices {
						return caseList.collect {it.stringId}; 
					} 
					</action>
					<action trigger="set">
					tovar: f.tovar,
					tovar_ids: f.tovar_ids,
					selected_tovar : f.selected_tovar;
					def indexTovar;
					tovar.choices.eachWithIndex{ item,index->
						if(item == tovar.value)
							indexTovar = index;
						}
						
					
					change selected_tovar about{return tovar_ids.choices[indexTovar].defaultValue; }

					</action>
				</logic>
			</dataRef>
			<dataRef>
				<id>zakaznik</id>
				<logic>
					<behavior>editable</behavior>
          <action trigger="get">
            zakaznik: f.zakaznik,
            zakaznik_ids: f.zakaznik_ids;
            def caseList = findCases( { it.processIdentifier.eq("Team12--ZAK")  } );
            change zakaznik choices {
            return caseList.collect {it.title};
            }
            change zakaznik_ids choices {
            return caseList.collect {it.stringId};
            }
          </action>
          <action trigger="set">
            zakaznik: f.zakaznik,
            zakaznik_ids: f.zakaznik_ids,
            selected_zakaznik : f.selected_zakaznik;
            def indexZakaznik;
            zakaznik.choices.eachWithIndex{ item,index->
            if(item == zakaznik.value)
            indexZakaznik = index;
            }


            change selected_zakaznik about{return zakaznik_ids.choices[indexZakaznik].defaultValue; }

          </action>
				</logic>
			</dataRef>
			<dataRef>
				<id>obchod</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
            obchod: f.obchod,
            obchod_ids: f.obchod_ids;
            def caseList = findCases( { it.processIdentifier.eq("Team12--OBC")  } );
            change obchod choices {
            return caseList.collect {it.title};
            }
            change obchod_ids choices {
            return caseList.collect {it.stringId};
            }
          </action>
          <action trigger="set">
            obchod: f.obchod,
            obchod_ids: f.obchod_ids,
            selected_obchod : f.selected_obchod;
            def indexObchod;
            obchod.choices.eachWithIndex{ item,index->
            if(item == obchod.value)
            indexObchod = index;
            }


            change selected_obchod about{return obchod_ids.choices[indexObchod].defaultValue; }

          </action>
				</logic>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>1</id>
			<actions phase="pre">
				<action>
					tovar : f.tovar,
					zakaznik : f.zakaznik;
					def s = "";
					s =  "objednavka" ;
					changeCaseProperty "title" about {s}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>4</id>
		<x>318</x>
		<y>143</y>
		<label>prehliadanie informacii o objednávke</label>
		<dataGroup>
			<id>1</id>
      <title>Podrobnosti o Tovare</title>
			<dataRef>
				<id>selected_tovar</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>category</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
			<dataRef>
				<id>price</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>2</id>
			<title>Podrobnosti o Zákazníkovi</title>
      <dataRef>
        <id>selected_zakaznik</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
			<dataRef>
        <id>surname</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
			<dataRef>
        <id>mail</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
		</dataGroup>
		<dataGroup>
			<id>3</id>
			<title>Podrobnosti o Predajni</title>
      <dataRef>
        <id>selected_obchod</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
			<dataRef>
        <id>address</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
			<dataRef>
        <id>city</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
			<dataRef>
        <id>kontakt</id>
        <logic>
          <behavior>visible</behavior>
        </logic>
      </dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>5</id>
		<x>311</x>
		<y>372</y>
		<label>upravit informacie o objednávke</label>
		<dataGroup>
			<id>1</id>
			<dataRef>
				<id>tovar</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
					tovar: f.tovar;
					def caseList = findCases( { it.processIdentifier.eq("Team12--TVR")  } ); 
					change tovar choices {
						return caseList.collect {it.title}; 
					} 

					</action>
					
				</logic>
			</dataRef>
			<dataRef>
				<id>zakaznik</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
					zakaznik: f.zakaznik;
					def caseList = findCases( { it.processIdentifier.eq("Team12--ZAK")  } ); 
					change zakaznik choices {
						return caseList.collect {it.title}; 
					} 
					</action>
				</logic>
			</dataRef>
			<dataRef>
				<id>obchod</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="get">
					obchod: f.obchod;
					def caseList = findCases( { it.processIdentifier.eq("Team12--OBC")  } ); 
					change obchod choices {
						return caseList.collect {it.title}; 
					} 
					</action>
				</logic>
			</dataRef>
		</dataGroup>
		
	</transition>
	
  <transition>
    <id>11</id>
    <x>446</x>
    <y>250</y>
    <label>podanie reklamacie</label>

	<event type="assign">
			<id>1</id>
			<actions phase="pre">
				<action>
					rekId : f.rekId;
					def newCase = createCase("Team12--REK", "reklamacia");
					change rekId value {
						return newCase.getStringId();
					}
				</action>
				<action>
					rekId : f.rekId;
					def calledTask = findTask({it.title.defaultValue.eq("vytvorenie reklamacie").and(it.caseId.eq(rekId.value))});

					calledTask = assignTask(calledTask);
					setData(calledTask, [
						"objednavka": [
							"value" : useCase.getStringId(),
							"type" : "text"
						]
					]);

				</action>				
			</actions>
		</event>
  </transition>
  <!-- PLACES -->
  <place>
    <id>2</id>
    <x>47</x>
    <y>249</y>
    <label></label>
    <tokens>1</tokens>
    <static>false</static>
  </place>
  <place>
    <id>3</id>
    <x>315</x>
    <y>249</y>
    <label></label>
    <tokens>0</tokens>
    <static>false</static>
  </place>
  <!-- ARCS -->
  <arc>
    <id>6</id>
    <type>read</type>
    <sourceId>3</sourceId>
    <destinationId>4</destinationId>
    <multiplicity>1</multiplicity>
  </arc>
  <arc>
    <id>9</id>
    <type>regular</type>
    <sourceId>2</sourceId>
    <destinationId>1</destinationId>
    <multiplicity>1</multiplicity>
  </arc>
  <arc>
    <id>10</id>
    <type>regular</type>
    <sourceId>1</sourceId>
    <destinationId>3</destinationId>
    <multiplicity>2</multiplicity>
  </arc>
  <arc>
    <id>12</id>
    <type>regular</type>
    <sourceId>3</sourceId>
    <destinationId>11</destinationId>
    <multiplicity>1</multiplicity>
    <breakPoint>
      <x>381</x>
      <y>262</y>
    </breakPoint>
  </arc>
  <arc>
    <id>13</id>
    <type>regular</type>
    <sourceId>11</sourceId>
    <destinationId>3</destinationId>
    <multiplicity>1</multiplicity>
    <breakPoint>
      <x>379</x>
      <y>231</y>
    </breakPoint>
  </arc>
  <arc>
    <id>14</id>
    <type>read</type>
    <sourceId>3</sourceId>
    <destinationId>5</destinationId>
    <multiplicity>2</multiplicity>
    <breakPoint>
      <x>315</x>
      <y>312</y>
    </breakPoint>
  </arc>
</document>